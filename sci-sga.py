
from sko.GA import GA


# 分时电价
pgs1 = [0.346, 0.346, 0.346, 0.346, 0.346, 0.346, 0.346, 0.346, 0.933, 0.933, 0.933, 0.933, 0.637, 0.637, 0.637,
            0.637, 0.637, 0.637, 0.637, 0.637, 0.933, 0.933, 0.933, 0.933]
pgs2 = [0.287, 0.287, 0.287, 0.287, 0.287, 0.287, 0.287, 0.287, 0.754, 1.273, 1.273, 1.273, 1.273, 0.754, 0.754,
            0.754, 0.754, 0.754, 0.754, 0.754, 0.754, 0.287, 0.287, 0.287]
pgs3 = [0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.769, 1.288, 1.288, 1.288, 1.288, 0.769, 0.769,
            0.769, 0.769, 0.769, 0.769, 0.769, 0.769, 0.302, 0.302, 0.302]
pgsM = [pgs1,pgs2,pgs3]
# 基站负载预测
Ex1 = [1014, 817, 799, 687, 649, 583, 472, 165, 53, -178, -482, -549, -618, -523, -373, -310, -20, 443, 875, 1406, 1573, 1601, 1324, 1037]
Ex2 = [242, 219, 219, 197, 197, 159, 62, -60, -210, -287, -329, -354, -449, -350, -294, -213, -86, 57, 170, 191, 205, 278, 236, 246]
Ex3 = [134, 100, 92, 93, 89, 63, 48, 1, -79, -108, -135, -265, -379, -364, -311, -217, -96, 15, 99, 139, 187, 155, 147, 124]
ExM = [Ex1,Ex2,Ex3]
# 光伏出力
pv = [0, 0, 0, 0, 0, 30, 51, 99, 189, 280, 345, 390, 435, 369, 295, 228, 168, 115, 69, 30, 0, 0, 0, 0]
c = 875     # 储能系统容量
# c = 290   875/3
Bc = 23     # 充电深度
Bd = -23    # 放电深度


# 目标函数 默认求最小值
def schaffer(S):
    Ex = ExM[2]
    pgs = pgsM[2]
    Pgrid = []
    for i in range(24):
        pgrid = max( Ex[i]-pv[i]+0.01*c*S[i] , 0 )
        Pgrid.append(pgrid)
    res = 0
    for i in range(24):
        res += Pgrid[i]*pgs[i]
    return res

def sol_lb(Ex,Pv):
    lb = []
    for i in range(24):
        if Ex[i]>Pv[i]: lb.append( max((Pv[i]-Ex[i])*100/c,Bd) )
        else:lb.append(0)
    return lb

def sol_ub(Ex,Pv):
    ub = []
    for i in range(24):ub.append(Bc)
    return ub


my_lb = sol_lb(ExM[2],pv)
my_ub = sol_ub(ExM[2],pv)

# for i in range(24):
#     constraint_ueq.append(lambda s: 10 - sum(s[:i+1]))
#     constraint_ueq.append(lambda s: sum(s[:i+1]) - 90)
# 使用循环添加会报错？
constraint_ueq = [
    lambda s: 10 - sum(s[:1]),
    lambda s: 10 - sum(s[:2]),
    lambda s: 10 - sum(s[:3]),
    lambda s: 10 - sum(s[:4]),
    lambda s: 10 - sum(s[:5]),
    lambda s: 10 - sum(s[:6]),
    lambda s: 10 - sum(s[:7]),
    lambda s: 10 - sum(s[:8]),
    lambda s: 10 - sum(s[:9]),
    lambda s: 10 - sum(s[:10]),
    lambda s: 10 - sum(s[:11]),
    lambda s: 10 - sum(s[:12]),
    lambda s: 10 - sum(s[:13]),
    lambda s: 10 - sum(s[:14]),
    lambda s: 10 - sum(s[:15]),
    lambda s: 10 - sum(s[:16]),
    lambda s: 10 - sum(s[:17]),
    lambda s: 10 - sum(s[:18]),
    lambda s: 10 - sum(s[:19]),
    lambda s: 10 - sum(s[:20]),
    lambda s: 10 - sum(s[:21]),
    lambda s: 10 - sum(s[:22]),
    lambda s: 10 - sum(s[:23]),
    lambda s: 10 - sum(s[:24]),
    lambda s: sum(s[:1]) - 90,
    lambda s: sum(s[:2]) - 90,
    lambda s: sum(s[:3]) - 90,
    lambda s: sum(s[:4]) - 90,
    lambda s: sum(s[:5]) - 90,
    lambda s: sum(s[:6]) - 90,
    lambda s: sum(s[:7]) - 90,
    lambda s: sum(s[:8]) - 90,
    lambda s: sum(s[:9]) - 90,
    lambda s: sum(s[:10]) - 90,
    lambda s: sum(s[:11]) - 90,
    lambda s: sum(s[:12]) - 90,
    lambda s: sum(s[:13]) - 90,
    lambda s: sum(s[:14]) - 90,
    lambda s: sum(s[:15]) - 90,
    lambda s: sum(s[:16]) - 90,
    lambda s: sum(s[:17]) - 90,
    lambda s: sum(s[:18]) - 90,
    lambda s: sum(s[:19]) - 90,
    lambda s: sum(s[:20]) - 90,
    lambda s: sum(s[:21]) - 90,
    lambda s: sum(s[:22]) - 90,
    lambda s: sum(s[:23]) - 90,
    lambda s: sum(s[:24]) - 90,
]


ga = GA(func=schaffer, n_dim=24, size_pop=1000, max_iter=1000, prob_mut=0.1, lb=my_lb, ub=my_ub,
            constraint_ueq=constraint_ueq, precision=1e-2)
bestS, bestP = ga.run()
print(bestP,bestS)



# for i in range(5):
#     print('================================ %d ===================================' %i)
#     ga = GA(func=schaffer, n_dim=24, size_pop=1000, max_iter=1000, prob_mut=0.1, lb=my_lb, ub=my_ub,
#                 constraint_ueq=constraint_ueq, precision=1e-2)
#     bestS, bestP = ga.run()
#     print(bestP,bestS)


# bestS = [19,4,-3,-6,-1,-2,7,2,1,6,0,10,13,13,3,2,11,2,-3,-10,-21,-10,-12,-1]
# d = []
# for i in range(24):
#     d.append(bestS[i]/100*c)
# print(d)

# d0 = [122.5, 113.75, -8.75, 113.75, 52.5, -175.0, -96.25, -8.75, 0.0, 35.0, 131.25, 105.0, 17.5, 78.75, 113.75, 17.5, 175.0, -148.75, 61.25, -8.75, -113.75, -166.25, -131.25, -175.0]
# d1 = [175.0, 8.75, 35.0, 0.0, -52.5, -8.75, 17.5, 52.5, 52.5, 87.5, 122.5, 17.5, 8.75, 61.25, 70.0, 17.5, 87.5, 26.25, -70.0, -148.75, -175.0, -140.0, -105.0, 0.0]
# d2 = [166.25, 35.0, -26.25, -52.5, -8.75, -17.5, 61.25, 17.5, 8.75, 52.5, 0.0, 87.5, 113.75, 113.75, 26.25, 17.5, 96.25, 17.5, -26.25, -87.5, -183.75, -87.5, -105.0, -8.75]
# D = [[122.5, 113.75, -8.75, 113.75, 52.5, -175.0, -96.25, -8.75, 0.0, 35.0, 131.25, 105.0, 17.5, 78.75, 113.75, 17.5, 175.0, -148.75, 61.25, -8.75, -113.75, -166.25, -131.25, -175.0],
#      [175.0, 8.75, 35.0, 0.0, -52.5, -8.75, 17.5, 52.5, 52.5, 87.5, 122.5, 17.5, 8.75, 61.25, 70.0, 17.5, 87.5, 26.25, -70.0, -148.75, -175.0, -140.0, -105.0, 0.0],
#      [166.25, 35.0, -26.25, -52.5, -8.75, -17.5, 61.25, 17.5, 8.75, 52.5, 0.0, 87.5, 113.75, 113.75, 26.25, 17.5, 96.25, 17.5, -26.25, -87.5, -183.75, -87.5, -105.0, -8.75],
#      ]

# bestS1 = [14,13,-1,13,6,-20,-11,-1,0,4,15,12,2,9,13,2,20,-17,7,-1,-13,-19,-15,-20]
# bestS2 = [14,13,-1,13,6,-20,-11,-1,0,4,15,12,2,9,13,2,20,-17,7,-1,-13,-19,-15,-20]
# bestS3 = [19,4,-3,-6,-1,-2,7,2,1,6,0,10,13,13,3,2,11,2,-3,-10,-21,-10,-12,-1]
# soc = [30]
# for i in range(23):
#     soc.append(soc[i]+(bestS1[i]+bestS2[i]+bestS3[i])/3)
# print(soc)
# soc = [30, 45.666666666666664, 55, 55.0, 60.666666666666664, 60.33333333333333, 50.33333333333333, 45.33333333333333, 45.33333333333333, 45.666666666666664, 50.33333333333333, 60.33333333333333, 71.66666666666666, 77.33333333333333, 87.66666666666666, 97.33333333333333, 99.33333333333333, 100.33333333333333, 100.66666666666666, 100.33333333333333, 100.33333333333333, 89.66666666666666, 73.66666666666666, 59.66666666666666]



# 结果记录
# i=0
# bestS = [14,13,-1,13,6,-20,-11,-1,0,4,15,12,2,9,13,2,20,-17,7,-1,-13,-19,-15,-20]
# [7921.55365777] [ 13.9471371   12.81272128  -1.15968746  12.8744964    5.77035771
#  -20.45037236 -10.90330851  -1.26273853   0.96605617   4.66178266
#   14.9008547   12.38461538   1.93211233   8.67765568  12.81709402
#    2.10622711  19.8996337  -16.98534977   7.05078745  -1.10352826
#  -13.32376999 -18.67574167 -15.09278476 -19.93932365]

# [7937.39759731]
# bestS = [15,15,8,15,-20,-8,-7,0,2,2,21,15,8,15,2,3,1,-22,7,11,-18,-18,-19,-17]
# [ 14.51996093  15.4128922    7.70785008  14.89622757 -20.06287389
#   -8.51654255  -6.71383225  -0.12903541   2.62857143   1.98827839
#   20.79267399  14.92893773   8.34627595  15.20976801   2.38144078
#    3.10598291   1.71306471 -22.44963985   7.74716152  10.52704188
#  -18.19277256 -18.00183128 -18.72066903 -16.89549506]

# i=1
# [578.39894735]
# bestS = [14,13,-1,13,6,-20,-11,-1,0,4,15,12,2,9,13,2,20,-17,7,-1,-13,-19,-15,-20]
# [ 15.04224148  -3.74301062  13.12159687   4.47422432  -7.36137921
#   -9.57222397   2.07784406   0.20781441   2.33650794   3.67326007
#   16.83858364   3.21269841   8.06544567   9.86837607   4.02710623
#    2.84200244  17.24297924   6.95897436 -11.45006803 -13.97240874
#  -19.42827494 -13.40239287  -4.24282749 -14.92430717]

# [591.67132525]
# bestS = [14,3,12,5,-15,-7,0,3,6,3,6,10,1,8,6,3,12,4,-10,-18,-20,7,-19,-3]
# [ 14.45256989   2.97362959  12.48699792   5.0910093  -15.03507334
#   -6.91778127   0.09343799   3.58339438   6.02100122   3.03296703
#    5.94798535  10.46935287   1.18510379   8.68327228   6.06031746
#    3.66202686  12.45763126   4.20683761 -10.53061224 -18.02092541
#  -20.38859724   7.52814064 -19.55182517  -2.75460872]

# [596.70019241]
# bestS = [20,1,4,0,-6,-1,2,6,6,10,14,2,1,7,8,2,10,3,-8,-17,-20,-16,-12,0]
# [ 19.63044805   0.86765963   4.20913197   0.07338019  -6.51121614
#   -1.36925868   2.37994767   6.52087912   6.39169719   9.73357753
#   14.4964591    1.84786325   1.20757021   6.66691087   8.18901099
#    1.79169719  10.55360195   3.21269841  -7.60353741 -17.33353681
#  -20.46722012 -16.21035283 -11.56598706  -0.42400195]

# i=2
# [297.14623979]
# bestS = [19,4,-3,-6,-1,-2,7,2,1,6,0,10,13,13,3,2,11,2,-3,-10,-21,-10,-12,-1]
# [ 19.19196232   4.25975929  -3.44313972  -5.528854    -1.42291994
#   -2.63388802   7.21733822   1.9040293    1.4996337    5.81880342
#    0.47741148   9.86837607  13.38998779  13.21587302   3.44297924
#    2.4993895   11.28937729   2.47692308  -2.92517007  -9.93747776
#  -20.97598061  -9.94924123 -12.72766789  -1.39062969]
#
#

