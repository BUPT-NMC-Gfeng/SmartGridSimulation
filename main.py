
import numpy as np
import matplotlib.pyplot as plt
from mip import *
from scipy import optimize
import sys



def list_add(a,b):
    c = []
    for i in range(len(a)):
        c.append(a[i]+b[i])
    return c

def draw_netload():
    x = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]  # 点的横坐标
    net_load1 = [1014, 817, 799, 687, 649, 613, 523, 264, 242, 102, -137, -159, -183, -154, -78, -82, 148, 558, 944,
                 1436, 1573, 1601, 1324, 1037]
    net_load2 = [242, 219, 219, 197, 197, 189, 113, 39, -21, -7, 16, 36, -14, 19, 1, 15, 82, 172, 239, 221, 205, 278,
                 236, 246]
    net_load3 = [134, 100, 92, 93, 89, 93, 99, 100, 110, 172, 210, 125, 56, 5, -16, 11, 72, 130, 168, 169, 187, 155,
                 147, 124]
    # net_load = net_load1 + net_load2 + net_load3
    net_load = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
    for i in range(24):
        net_load[i] = net_load1[i] + net_load2[i] + net_load3[i]
    # print(net_load)
    net_load = [1390, 1136, 1110, 977, 935, 895, 735, 403, 331, 267, 89, 2, -141, -130, -93, -56, 302, 860, 1351, 1826, 1965, 2034, 1707, 1407]
    plt.plot(x, net_load1, 's-', color='r', label="工业区")  # s-:方形
    plt.plot(x, net_load2, 'o-', color='g', label="商业区")  # o-:圆形
    plt.plot(x, net_load3, 'x-', color='b', label="居民区")  # o-:圆形
    plt.plot(x, net_load, '*-', color='y', label="系统总负载")  # o-:圆形
    plt.xlabel("时间")  # 横坐标名字
    plt.ylabel("能耗(kWh)")  # 纵坐标名字
    plt.legend(loc="best")  # 图例
    plt.savefig('netload.jpg')
    plt.show()

def draw_ag_income():
    x = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]  # 点的横坐标
    # 内部电价收益
    # R = [895.16, 731.5840000000001, 714.84, 629.188, 602.1400000000001, 576.3800000000001, 473.34000000000003,
    #      259.53200000000004, 321.7640000000002, 350.26400000000024, 249.5360000000002, 159.34600000000015, 0, 0, 0, 0,
    #      322.5360000000002, 918.4800000000004, 1442.8680000000006, 1950.168000000001, 2420.880000000001,
    #      2505.8880000000013, 2103.0240000000013, 1733.4240000000007]
    #新
    # R=[984.6400000000001, 720.4765000000001, 709.5525, 582.7355000000001, 569.215, 467.40999999999997, 412.7775, 274.8545,
    #  464.5020000000002, 618.2870000000005, 467.5515000000003, 259.0560000000002, 0, 0, 0, 0, 542.9685000000004,
    #  876.7050000000005, 1417.1055000000006, 1826.4930000000008, 2214.1425000000013, 2292.6255000000015,
    #  1925.611500000001, 1578.474000000001]
    #
    # k1 = [0,0,0,0,0,0,0,0,-50,148,131,172,-3,22,109,155,17,0,0,-4,0,386,201,0]-论文数据
    # k1 = [0,0,71,62,60,37,27,6,32,95,25,10,0,0,0,0,32,92,144,195,242,297,301,173]-旧
    # 对比baseline
    # k2 = [0,0,-10,0,0,0,0,-51,12,155,122,58,-52,-55,-20,80,8,0,0,-4,0,265,281,0]

    k1 = [0,0,0,58,57,57,47,41,27,46,61,46,61,47,26,0,0,0,0,54,88,141,182,221,229,190,140]
    plt.plot(x, k1, 'x-', color='b', )  # s-:方形
    # plt.plot(x, k2, 's-', color='g', label="Aggregator revenue-grid price")  # o-:圆形
    plt.xlabel("时间")  # 横坐标名字
    plt.ylabel("聚合器收益（元）")  # 纵坐标名字
    plt.legend(loc="best")  # 图例
    plt.axhline(y=0, c="#000000", ls="--", lw=2)
    plt.savefig('ag_income.jpg')
    plt.show()

def draw_BS_income():
    x = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]  # 点的横坐标

    # BU = [[-329 - 265 - 259 - 222 - 210 - 177 - 133 - 14    50 - 24 - 213 - 244
           #    -274  -231  -154  -134    89  -148  -401  -701 -1043 -1062  -878  -688]
           #  [  -70   -63   -63   -57   -57   -35     0    -6   -78  -100  -106  -107
           #    -157  -112   -99   -67    50    59   -42   -85   -59   -80   -68   -71]
           #  [  -38   -28   -26   -26   -25    -7     3    25    11    23    27   -46
           #    -109  -121  -111   -69    42    72    -1   -56   -54   -44   -42   -35]]
    # 工业区
    # k1 = [0,0,0,0,0,0,0,0,0,0,9,49,0,22,46,46,0,0,0,0,0,0,0,0]
    k1 = [-329,-265,-259,-222,-210,-177,-133,-14,50,-24,-213,-244,-274,-231,-154,-134,89,-148,-401,-701,-1043,-1062,-878,-688]
    # 商业区
    k2 = [-70,-63,-63,-57,-57,-35,0,-6,-78,-100,-106,-107,-157,-112,-99,-67,50,59,-42,-85,-60,-80,-68,-71]
    # 居民区
    k3 = [-38,-28,-26,-26,-25,-7,3,25,11,23,27,-46,-109,-121,-111,-69,42,72,-1,-56,-54,-44,-42,-35]
    plt.plot(x, k1, 'x-', color='b', label="工业区")  # s-:方形
    plt.plot(x, k2, 's-', color='g', label="商业区")  # o-:圆形
    plt.plot(x, k3, 'o-', color='r', label="居民区")  # o-:圆形
    plt.xlabel("时间")  # 横坐标名字
    plt.ylabel("基站收益（元）")  # 纵坐标名字
    plt.legend(loc="best")  # 图例
    # plt.axhline(y=0, c="#000000", ls="--", lw=2)
    plt.savefig('bs_income.jpg')
    plt.show()



def draw_energy():
    # ####################
    # ATT_LSTM = [17429,10150]
    # MATT_CNN = [0,7279]
    ATT_LSTM = [28118, 19202]
    MATT_CNN = [0, 8916]
    x = np.arange(2)  # 总共有几组，就设置成几，我们这里有三组，所以设置为3
    total_width, n = 0.4, 2  # 有多少个类型，只需更改n即可，比如这里我们对比了四个，那么就把n设成4
    width = total_width / n
    x = x - (total_width - width) / 2
    # '#5cb85c', '#5bc0de'
    plt.bar(x, ATT_LSTM, color="#5cb85c", width=width, label='Tradtional energy')
    plt.bar(x + width, MATT_CNN, color="#5bc0de", width=width, label='Photovoltaic energy')
    plt.xlabel(" ")
    plt.ylabel("Energy consumption, PV energy ratio")
    plt.legend(loc="best")
    plt.xticks([0, 1], ['Tradtional energy supply mode', 'Energy consumption for participation\nin energy sharing'])
    my_y_ticks = np.arange(0,30000, 5000)
    plt.ylim((0, 30000))
    plt.yticks(my_y_ticks)
    # for x, y in enumerate(y_list):
    #     plt.text(x, y + y_max / 20, str(round(percentage[x], 2)), ha='center')
    plt.savefig('energy.jpg')
    plt.show()

def draw_pv():
    x = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]  # 点的横坐标
    Ex1 = [1014, 817, 799, 687, 649, 583, 472, 165, 53, -178, -482, -549, -618, -523, -373, -310, -20, 443, 875, 1406,
           1573, 1601, 1324, 1037]
    Ex2 = [242, 219, 219, 197, 197, 159, 62, -60, -210, -287, -329, -354, -449, -350, -294, -213, -86, 57, 170, 191,
           205, 278, 236, 246]
    Ex3 = [134, 100, 92, 93, 89, 63, 48, 1, -79, -108, -135, -265, -379, -364, -311, -217, -96, 15, 99, 139, 187, 155,
           147, 124]

    k0 = [813, 794, 715, 675, 667, 646, 465, 501, 562, 564, 598, 709, 701, 664, 702, 663, 823, 1151, 1479, 1549, 1455,
          1199, 1030, 990]
    # sumk0 = 0
    # for i in range(24):
    #     k0[i] = Ex1[i]+Ex2[i]+Ex3[i]
    #     sumk0 += k0[i]
    # print(sumk0)
    k1 = [1390, 1136, 1110, 977, 935, 895, 735, 403, 331, 267, 89, 2, -141, -130, -93, -56, 302, 860, 1351, 1826, 1965, 2034, 1707, 1407]  # 线1的纵坐标
    # k1 = [813, 794, 715, 675, 667, 646, 465, 403, 331, 267, 89, 2, -141, -130, -93, -56, 302, 1050, 1400, 1497, 1455,
    #       1199, 1030, 990]  # 线1的纵坐标
    sumk1 = 0 # k1求和
    for i in range(24):
        sumk1 += k1[i]
    print(sumk1)

    pv = [0, 0, 0, 0, 0, 0, 0, 99, 189, 280, 345, 390, 435, 369, 295, 228, 168, 115, 29, 30, 0, 0, 0, 0]
    sumk0 = 0
    for i in range(24):
        k0[i] = k1[i]+pv[i]*3
        sumk0 += k0[i]


    # k2 = [1080, 884, 863, 761, 729, 536, 297, 92, 0, 0, 0, 0, 24, 0, 86, 80, 0, 37, 423, 868, 1049, 1096, 926, 782]  # 线2的纵坐标
    k2 = [1390, 1136, 1110, 977, 935, 895, 735, 92, 0, 0, 0, 0, 24, 0, 86, 80, 0, 1050, 1351, 1826, 1965, 2034, 1707, 1407]  # 线2的纵坐标

    sumk2=0
    for i in range(24):
        sumk2 += k2[i]
    print(sumk2)
    # k0 = 10023
    # k1 = 14370
    # k2 = 13678
    plt.plot(x, k0,'s-',color='b', label="Tradtional energy supply mode")  # s-:方形
    plt.plot(x, k1, 'o-',color='g', label="Energy consumption connected to\nPV energy")  # o-:圆形
    plt.plot(x, k2, 'x-',color='r', label="Energy consumption for participation\nin energy sharing")  # o-:圆形
    plt.xlabel("Time period")  # 横坐标名字
    plt.ylabel("Power/(kWh)")  # 纵坐标名字
    plt.legend(loc="best")  # 图例
    plt.savefig('trad_vs_org.jpg')
    plt.show()

def BUF(x,pms,pmb,pv,Ex):
    ret = -pms*max((x-pv),0) - pmb*min((x-pv),0) + 0.05*pv - 0.2*Ex*(Ex/x-1)
    return -ret



if __name__ == '__main__':
    # cb-1-工业；ob-1-商业；rb-1-居民
    pv = [0, 0, 0, 0, 0, 30, 51, 99, 189, 280, 345, 390, 435, 369, 295, 228, 168, 115, 69, 30, 0, 0, 0, 0]
    # for i in range(24):
    #     pv[i] = int(pv[i]*1.5)
    # print(pv)

    Ex1 = [1014, 817, 799, 687, 649, 583, 472, 165, 53, -178, -482, -549, -618, -523, -373, -310, -20, 443, 875, 1406, 1573, 1601, 1324, 1037]
    Ex2 = [242, 219, 219, 197, 197, 159, 62, -60, -210, -287, -329, -354, -449, -350, -294, -213, -86, 57, 170, 191, 205, 278, 236, 246]
    Ex3 = [134, 100, 92, 93, 89, 63, 48, 1, -79, -108, -135, -265, -379, -364, -311, -217, -96, 15, 99, 139, 187, 155, 147, 124]
    ExM = [Ex1,Ex2,Ex3]
    Ex_o = [[773,623,609,524,495,445,360,126,43,145,345,390,505,427,305,253,30,248,491,788,729,742,613,480],
            [198,179,179,161,161,130,51,49,171,234,269,289,367,286,240,174,44,30,88,99,167,227,193,201],
            [109,82,75,76,73,51,39,30,65,88,110,216,309,297,254,177,49,30,51,71,153,127,120,101]]
    Ex = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    sumEx = 17429
    # for t in range(24):
    #     Ex[t] = Ex_o[0][t]+Ex_o[1][t]+Ex_o[2][t]
    #     sumEx += Ex[t]
    # net_load_o = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    sumNetload = 10150
    # for t in range(24):
    #     net_load_o[t] = Ex[t] - 3*pv[t]
    #     sumNetload += net_load_o[t]
    # print(net_load_o)

    # netload = Ex-pv 基站净负荷
    net_load1 = [1014, 817, 799, 687, 649, 613, 523, 264, 242, 102, -137, -159, -183, -154, -78, -82, 148, 558, 944, 1436, 1573, 1601, 1324, 1037]
    net_load2 = [242, 219, 219, 197, 197, 189, 113, 39, -21, -7, 16, 36, -14, 19, 1, 15, 82, 172, 239, 221, 205, 278, 236, 246]
    net_load3 = [134, 100, 92, 93, 89, 93, 99, 100, 110, 172, 210, 125, 56, 5, -16, 11, 72, 130, 168, 169, 187, 155, 147, 124]
    # for t in range(24):
    #     Ex1[t] = net_load1[t] - pv[t]
    #     Ex2[t] = net_load2[t] - pv[t]
    #     Ex3[t] = net_load3[t] - pv[t]
    # for i in range(24):
    #     net_load1[i] = int(net_load1[i] * 1.4)
    #     net_load2[i] = int(net_load2[i] * 1.4)
    #     net_load3[i] = int(net_load3[i] * 1.4)
    net_loadM = [net_load1,net_load2,net_load3]
    # net_load = net_load1 + net_load2 + net_load3
    net_load = [1390, 1136, 1110, 977, 935, 895, 735, 403, 331, 267, 89, 2, -141, -130, -93, -56, 302, 860, 1351, 1826, 1965, 2034, 1707, 1407]
    # for i in range(24):
    #     net_load[i] = net_load1[i] + net_load2[i] + net_load3[i]
    # Onet_load = [813, 794, 715, 675, 646, 586, 366, 333, 181, -3, 3, 7, 28, 46, 8, 12, 403, 854, 1269, 1429, 1413, 969, 945, 990]

    # pms1 = [0.85,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.85,0.15,0.9,0.8,1,0.85,0.85,0.85,1.3,1.3,1.3,1.3,0.85,0.85]
    # pms2 = [0.63,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.63,0.63,0.53,0.63,0.97,0.97,0.97,0.85,0.63,0.63,0.63,0.97,0.97,0.97,0.97,0.97]
    # pms3 = [0.63, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.63, 0.63, 0.53, 0.63, 0.97, 0.97, 0.97, 0.85, 0.63, 0.63,
    #         0.63, 0.97, 0.97, 0.97, 0.97, 0.97]
    pms1 = [0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,]
    pms2 = [0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,]
    pms3 = [0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,]
    pmsM = [pms1,pms2,pms3]
    # pmb1 = [0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.4,0.37,0.4,0.3,0.37,0.3,0.4,0.4,0.4,0.32,0.3,0.3,0.3,0.3,0.3]
    # pmb2 = [0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.45,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3]
    # pmb3 = [0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.45,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3]
    pmb1 = [0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,]
    pmb2 = [0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,]
    pmb3 = [0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,]
    pmbM = [pmb1,pmb2,pmb3]
    pgs1 = [0.346, 0.346, 0.346, 0.346, 0.346, 0.346, 0.346, 0.346, 0.933, 0.933, 0.933, 0.933, 0.637, 0.637, 0.637,
            0.637, 0.637, 0.637, 0.637, 0.637, 0.933, 0.933, 0.933, 0.933]
    pgs2 = [0.287, 0.287, 0.287, 0.287, 0.287, 0.287, 0.287, 0.287, 0.754, 1.273, 1.273, 1.273, 1.273, 0.754, 0.754,
            0.754, 0.754, 0.754, 0.754, 0.754, 0.754, 0.287, 0.287, 0.287]
    pgs3 = [0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.769, 1.288, 1.288, 1.288, 1.288, 0.769, 0.769,
            0.769, 0.769, 0.769, 0.769, 0.769, 0.769, 0.302, 0.302, 0.302]
    pgsM = [pgs1,pgs2,pgs3]
    pgb = 0.3

    # draw_netload()
    # draw_pv()
    # draw_energy()
    # draw_ag_income()
    # draw_BS_income()


#     求解ai和bi
#     A = np.zeros((3,24))
#     B = np.zeros((3,24))
#     for t in range(24):
#         for i in range(3):
#             pnet = [net_load1[t], net_load2[t], net_load3[t]]
#             # case1
#             if net_load[t] > 0:
#                 if net_loadM[i][t] > 0:
#                     A[i][t] = pgsM[i][t] / max(pgsM[i])
#                 else:
#                     tmp1 = sum(pnet[k] for k in range(3) if pnet[k]<0)
#                     tmp2 = sum(pnet[k] for k in range(3) if pnet[k]>0)
#                     A[i][t] = pgsM[i][t] / max(pgsM[i]) - 0.1 * abs(tmp1/tmp2)
#                 B[i][t] = 0
#             # case2
#             elif net_load[t] < 0:
#                 A[i][t] = pmsM[i][t] / max(pmsM[i])
#                 if net_loadM[i][t] < 0:
#                     B[i][t] = net_loadM[i][t]/net_load[t]
#                 else:
#                     tmp1 = sum(pnet[k] for k in range(3) if pnet[k] > 0)
#                     B[i][t] = 1 - 0.1 * abs(tmp1/net_load[t])
#             # case3
#             elif net_load[t] == 0:
#                 A[i][t] = pmsM[i][t]/max(pgsM[i])
#                 B[i][t] = 1
    # A = [[0.371,0.371,0.371,0.371,0.371,0.371,0.371,0.371,1.0,1.0,0.94,0.902,0.615,0.769,0.654,0.654,0.683,0.683,0.683,0.683,1.0,1.0,1.0,1.0,],
    #      [0.225,0.225,0.225,0.225,0.225,0.225,0.225,0.225,0.586,0.997,1.0,1.0,0.649,1.0,1.0,1.0,0.592,0.592,0.592,0.592,0.592,0.225,0.225,0.225,],
    #      [0.234,0.234,0.234,0.234,0.234,0.234,0.234,0.234,0.597,1.0,1.0,1.0,0.649,1.0,1.0,1.0,0.597,0.597,0.597,0.597,0.597,0.234,0.234,0.234,]]
    # B = [[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.297,1.196,0.836,1.475,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,],
    #      [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.099,0.98,0.999,0.952,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,],
    #      [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.96,0.98,0.179,0.952,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,]]
    # for i in range(3):
    #     print('[',end='')
    #     for j in range(24):
    #         print(round(A[i][j],3),end=',')
    #     print('],')
    #
    # for i in range(3):
    #     print('[',end='')
    #     for j in range(24):
    #         print(round(B[i][j],3),end=',')
    #     print('],')
# 混合整数线性优化
    # m = Model()
    # D = [[m.add_var() for i in range(24)] for j in range(3)]
    # # T = np.zeros((3,24))
    # K1 = [[m.add_var(var_type=BINARY) for i in range(24)] for j in range(3)]
    # K2 = [[m.add_var(var_type=BINARY) for i in range(24)] for j in range(3)]
    # Pgrid = [[m.add_var() for i in range(24)] for j in range(3)]
    # Pess_s = [[m.add_var() for i in range(24)] for j in range(3)]
    # Pess_b = [[m.add_var() for i in range(24)] for j in range(3)]
    # Uabs = [[m.add_var(var_type=BINARY) for i in range(24)] for j in range(3)]
    # Ure = [[m.add_var(var_type=BINARY) for i in range(24)] for j in range(3)]
    # Eess = [m.add_var() for i in range(24)]
    # Pabs = [m.add_var() for i in range(24)]
    # Pre = [m.add_var() for i in range(24)]
    # Uabs_ = [m.add_var() for i in range(24)]
    # Ure_ = [m.add_var() for i in range(24)]
    # m.objective = xsum(A[i][t] * (net_loadM[i][t] + D[i][t]) for i in range(3) for t in range(24) if K1[i][t] ==1) -\
    #               xsum(B[i][t] * (net_loadM[i][t] + D[i][t]) for i in range(3) for t in range(24) if K2[i][t] ==1)
    # for t in range(24):
    #     for i in range(3):
    #         # m += T[i][t] == net_loadM[i][t] + D[i][t]
    #         m += K1[i][t] + K2[i][t] <=1
    #         m += (net_loadM[i][t] + D[i][t]) <= K1[i][t] * sys.maxsize
    #         m += (net_loadM[i][t] + D[i][t]) >= K2[i][t] * (-sys.maxsize-1)
    #         m += Pgrid[i][t] + Pess_b[i][t] == net_loadM[i][t] + Pess_s[i][t]
    #         m += D[i][t] == Pess_s[i][t] - Pess_b[i][t]
    #         m += Pess_s[i][t] >= 0
    #         m += Pess_s[i][t] <= 290 * Uabs[i][t]
    #         m += Pess_b[i][t] >= 0
    #         m += Pess_b[i][t] <= 290 * Ure[i][t]
    #         m += Uabs[i][t] + Ure[i][t] <= 1
    #         m += xsum(0.9 * Pess_s[i][t_] - 1/0.9 * Pess_b[i][t_] for t_ in range(24))
    #     if t>0:
    #         m += Eess[t]==Eess[t-1] + 0.9*Pabs[t] - 1/0.9*Pre[t]
    #     m += Eess[t] >=175
    #     m += Eess[t] <= 787.5
    #     m += Pabs[t] >= 0
    #     m += Pabs[t] <= Uabs_[t] * sys.maxsize
    #     m += Pabs[t] <= 290
    #     m += Pre[t] >= 0
    #     m += Pre[t] <= Ure_[t] * sys.maxsize
    #     m += Pabs[t] <= 290
    #     m += Ure_[t]+Uabs_[t] <= 1
    #     m += xsum(Pess_s[i][t] - Pess_b[i][t] for i in range(3)) == Pabs[t] - Pre[t]
    # m.optimize()
    # print('**************************************************')
    # print('D:')
    # for di in D:
    #     dList = []
    #     for dij in di:
    #         dList.append(int(dij.x))
    #     print(dList)
    # print('Pess_s:')
    # for psi in Pess_s:
    #     pList = []
    #     for pij in psi:
    #         pList.append(int(pij.x))
    #     print(pList)
    #
    # print('Pess_b:')
    # for pbi in Pess_b:
    #     pbList = []
    #     for pbij in pbi:
    #         pbList.append(int(pbij.x))
    #     print(pbList)
    #
    # print('Pgrid:')
    # for pbi in Pgrid:
    #     pbList = []
    #     for pbij in pbi:
    #         pbList.append(int(pbij.x))
    #     print(pbList)
    #
    # print(m.objective_value)
    # print('**************************************************')

    #旧优化数据
    # D = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 159, 183, 154, 78, 82, 0, 0, 0, 0, 0, 0, 0, 0],
    #      [0, 0, 0, 0, 0, 0, 0, 0, 21, 7, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0]]


    # print('Pess_b==========================================================')
    # print(Pess_b)
    # print('Pess_s==========================================================')
    # print(Pess_s)
    # print('Pgrid==========================================================')
    # print(Pgrid)
    # 新数据-部分
    # Pess_b = [
    #     [0,0,-9,0,0,-175,-96,-9,0,0,0,0,0,0,0,0,0,-149,0,-9,-114,-116,-131,-175]
    #     [0,0,0,0,-53,-9,0,0,0,0,0,0,0,0,0,0,0,0,-70,-149,-175,-140,-105,0]
    #     [0,0,-26,-53,-9,-18,0,0,0,0,0,0,0,0,0,0,0,0,-26,-88,-184,-88,-105,-9]
    # ]
    # Pess_s = [
    #     [123,114,-18,114,53,-350,-193,-18,0,35,131,105,18,78,114,18,175,-298,61,-18,-228,-333,-263,-350]
    #     [175,9,35,0,-105,-18,18,53,53,88,123,18,9,61,70,18,87,26,-140,-297,-350,-280,-210,0]
    #     [166,35,-52,-105,-17,-35,-61,18,9,23,0,88,114,114,26,18,96,18,-52,-175,-368,-175,-210,-18]
    # ]


    # 旧数据
    # Pess_s = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 159, 183, 154, 78, 82, 0, 0, 0, 0, 0, 0, 0, 0],
    #           [0, 0, 0, 0, 0, 0, 0, 0, 21, 7, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    # Pess_b = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    # Pgrid = [[1014, 817, 799, 687, 649, 613, 523, 264, 242, 102, 0, 0, 0, 0, 0, 0, 148, 558, 944, 1436, 1573, 1601, 1324, 1037],
    #          [242, 219, 219, 197, 197, 189, 113, 39, 0, 0, 16, 36, 0, 19, 1, 15, 82, 172, 239, 221, 205, 278, 236, 246],
    #          [134, 100, 92, 93, 89, 93, 99, 100, 110, 172, 210, 125, 56, 5, 0, 11, 72, 130, 168, 169, 187, 155, 147, 124]]
    # DeltaE = [[725,584,571,491,464,438,374,189,173,73,0,0,-131,-109,-55,-59,106,399,675,1026,1124,1144,945,741,],
    #           [173,157,157,141,141,135,81,27,0,0,12,26,-10,-13,-1,-11,59,123,171,158,147,199,169,176,],
    #           [96,72,66,67,64,67,71,72,79,123,150,90,-40,-4,-12,-8,52,93,120,121,134,110,105,89,]]

    D = [
        [122.5, 113.75, -8.75, 113.75, 52.5, -175.0, -96.25, -8.75, 0.0, 35.0, 131.25, 105.0, 17.5, 78.75, 113.75, 17.5,
         175.0, -148.75, 61.25, -8.75, -113.75, -166.25, -131.25, -175.0],
        [175.0, 8.75, 35.0, 0.0, -52.5, -8.75, 17.5, 52.5, 52.5, 87.5, 122.5, 17.5, 8.75, 61.25, 70.0, 17.5, 87.5,
         26.25, -70.0, -148.75, -175.0, -140.0, -105.0, 0.0],
        [166.25, 35.0, -26.25, -52.5, -8.75, -17.5, 61.25, 17.5, 8.75, 52.5, 0.0, 87.5, 113.75, 113.75, 26.25, 17.5,
         96.25, 17.5, -26.25, -87.5, -183.75, -87.5, -105.0, -8.75],
    ]
    Pess_b = np.zeros((3, 24))
    Pess_s = np.zeros((3, 24))
    Pgrid = np.zeros((3, 24))
    for i in range(3):
        for t in range(24):
            if D[i][t] < 0:
                Pess_b[i][t] = D[i][t]
            Pess_s[i][t] = D[i][t] + Pess_b[i][t]
            Pgrid[i][t] = net_loadM[i][t] + D[i][t]

    DeltaE = np.zeros((3,24))
    for i in range(3):
        for t in range(24):
            if net_load[t] >= 0:
                DeltaE[i][t] = (int)(Pgrid[i][t])
            else:
                DeltaE[i][t] = (int)(-Pgrid[i][t]-Pess_b[i][t]-D[i][t])
    print(DeltaE)

    # DeltaE = [[1136.  930.  790.  800.  701.  438.  426.  255.  242.  137. - 5. - 54. 148. - 3. - 149.   47.  323.  409.1005.
    #       1427. 1459. 1434. 1192.  862.][417.  227.  254.  197.  144.  180.  130.   91.   31.   80.  138.
    #      53. - 3. - 141. - 141. - 50.  169.  198.  169.   72.   30.  138.  131.  246.][300.  135.   65.   40.   80.
    #     75.  160.  117.  118.  224.  210.  212. - 283. - 232. - 36. - 46.  168.  147.  141.   81.    3.   67.   42.
    #     115.]]

    R = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    U = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    G = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    S = np.zeros((3, 24))
    BU = np.full((3,24),-sys.maxsize - 1)
    X_o = np.zeros((3, 24))
    N = np.zeros((3, 24))
    for i in range(3):
        for t in range(24):
            S[i][t] = 0.57 * abs(D[i][t])
    Ppeak = 3.5
    Pidle = 0.65
    # workload1 = [223, 111, 113, 73, 37, 29, 50, 93, 139, 189, 226, 247, 231, 253, 256, 273, 272, 268, 241, 297, 309, 308, 295, 256]
    # workload2 = [172, 85, 87, 54, 27, 23, 40, 73, 110, 147, 180, 194, 184, 200, 201, 215, 217, 213, 192, 231, 244, 96, 79, 51]
    # workload3 = [42, 19, 21, 11, 8, 9, 19, 29, 33, 42, 46, 46, 48, 50, 50, 50, 44, 56, 60, 60, 56, 48, 45, 44]
    # Ex_max = 1500
    # Ex_min = 30
    for t in range(24):
        state = [0, 0]
        flag = 0
        if DeltaE[0][t] != 0 and DeltaE[1][t] != 0 and DeltaE[2][t] != 0:
            Dsum = DeltaE[0][t] + DeltaE[1][t] + DeltaE[2][t]
            sign = [0, 0, 0]
            sign[0] = 1 if DeltaE[0][t] > 0 else -1
            sign[1] = 1 if DeltaE[1][t] > 0 else -1
            sign[2] = 1 if DeltaE[2][t] > 0 else -1
            if sum(sign) == 2 or sum(sign) == 1:
                k = 0
                if sum(sign) == 2:
                    if sign[0] < 0: k = 0
                    elif sign[1] < 0: k = 1
                    else: k = 2
                else:
                    if sign[0] > 0: k = 0
                    elif sign[1] > 0: k = 1
                    else: k = 2
                state[1] = k
                _sum = Dsum - DeltaE[k][t] * 2
                if abs(DeltaE[k][t]) > _sum:
                    flag = 1
                else:
                    flag = 2
                state[0] = flag
            else:
                flag = 3

        i=0
        while i<3 :
            for pmb in np.arange(0.3,pgsM[i][t],0.002):
                # pmbM[i][t] = pmb
                for pms in np.arange(pmb,pgsM[i][t],0.002):
                    # pmsM[i][t] = pms
                    preR = R[t]
                    ut = pms * (sum(np.array(Pgrid)[:,t])+sum(np.array(Pess_b)[:,t])) - pmb * sum(np.array(Pess_s)[:,t]) if net_load[t]>0 else \
                        pms * (sum(np.array(Pgrid)[:, t]) + sum(np.array(Pess_b)[:, t]))
                    gt = 0
                    if flag==1 :
                        gt = pgb*max( sum(np.array(DeltaE)[:,t]),0 ) + pgsM[state[1]][t]*min( sum(np.array(DeltaE)[:,t]),0 )
                    elif flag==2 :
                        if state[1]==0:p,q=1,2
                        elif state[1]==1:p,q=0,2
                        else:p,q=0,1
                        gt = pgb*max(sum(np.array(DeltaE)[:,t]),0) + pgsM[p][t]*min((DeltaE[state[1]][t]+DeltaE[p][t]),0) + \
                             pgsM[q][t]*min( (DeltaE[q][t] + max( (DeltaE[p][t]+DeltaE[state[1]][t]),0 )),0 )
                    elif flag==3:
                        for j in range(3):
                            gt += pgb*max(DeltaE[j][t],0) + pgsM[j][t]*min(DeltaE[j][t],0)

                    rt = ut + gt - S[i][t]
                    if rt >= preR:
                        U[t] = ut
                        G[t] = gt
                        R[t] = rt
                        pmbM[i][t] = pmb
                        pmsM[i][t] = pms
#           计算最佳用电量
            pre = BU[i][t]
            for x in range(30,1500,1):
                bu = -pmsM[i][t]*max((x-pv[t]),0)-pmbM[i][t]*min((x-pv[t]),0) + 0.05*pv[t] -0.2*ExM[i][t]*(ExM[i][t]/x-1)
                if bu > pre:
                    pre = bu
                    X_o[i][t] = x
#           计算活跃服务器数量
#           略
            BU[i][t] = pre
            i += 1
#
    print('**************************************')
    print('R:')
    print(R)
    print('BU:')
    print(BU)
    print('X:')
    print(X_o)
    print('pms:')
    for i in range(3):
        print(pmsM[i])
    print('pmb:')
    for i in range(3):
        print(pmbM[i])
    print('**************************************')

# 旧
#     R = [895.16, 731.5840000000001, 714.84, 629.188, 602.1400000000001, 576.3800000000001, 473.34000000000003, 259.53200000000004, 321.7640000000002, 350.26400000000024, 249.5360000000002, 159.34600000000015, 0, 0, 0, 0, 322.5360000000002, 918.4800000000004, 1442.8680000000006, 1950.168000000001, 2420.880000000001, 2505.8880000000013, 2103.0240000000013, 1733.4240000000007]
#     BU = [[ -329  -265  -259  -222  -210  -177  -133   -14    50   -24  -213  -244
#    -274  -231  -154  -134    89  -148  -401  -701 -1043 -1062  -878  -688]
#  [  -70   -63   -63   -57   -57   -35     0    -6   -78  -100  -106  -107
#    -157  -112   -99   -67    50    59   -42   -85   -59   -80   -68   -71]
#  [  -38   -28   -26   -26   -25    -7     3    25    11    23    27   -46
#    -109  -121  -111   -69    42    72    -1   -56   -54   -44   -42   -35]]
#     X = [[773. 623. 609. 524. 495. 445. 360. 126.  43. 145. 345. 390. 505. 427.
#   305. 253.  30. 248. 491. 788. 729. 742. 613. 480.]
#  [198. 179. 179. 161. 161. 130.  51.  49. 171. 234. 269. 289. 367. 286.
#   240. 174.  44.  30.  88.  99. 167. 227. 193. 201.]
#  [109.  82.  75.  76.  73.  51.  39.  30.  65.  88. 110. 216. 309. 297.
#   254. 177.  49.  30.  51.  71. 153. 127. 120. 101.]]
#     pms = [0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.9320000000000006, 0.9320000000000006, 0.9320000000000006, 0.9320000000000006, 0.3, 0.3, 0.3, 0.3, 0.6360000000000003, 0.6360000000000003, 0.6360000000000003, 0.6360000000000003, 0.9320000000000006, 0.9320000000000006, 0.9320000000000006, 0.9320000000000006]
# [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 1.272000000000001, 1.272000000000001, 1.272000000000001, 0.3, 0.3, 0.3, 0.3, 0.7520000000000004, 0.7520000000000004, 0.7520000000000004, 0.7520000000000004, 0.3, 0.3, 0.3, 0.3]
# [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 1.286000000000001, 1.286000000000001, 1.286000000000001, 0.3, 0.3, 0.3, 0.3, 0.7680000000000005, 0.7680000000000005, 0.7680000000000005, 0.7680000000000005, 0.3, 0.3, 0.3, 0.3]
#     pmb = [0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.6360000000000003, 0.6360000000000003, 0.6360000000000003, 0.6360000000000003, 0.9320000000000006, 0.9320000000000006, 0.9320000000000006, 0.9320000000000006]
# [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.7520000000000004, 0.7520000000000004, 0.7520000000000004, 0.7520000000000004, 0.3, 0.3, 0.3, 0.3]
# [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.7680000000000005, 0.7680000000000005, 0.7680000000000005, 0.7680000000000005, 0.3, 0.3, 0.3, 0.3]


# 新
# R:
# [984.6400000000001, 720.4765000000001, 709.5525, 582.7355000000001, 569.215, 467.40999999999997, 412.7775, 274.8545, 464.5020000000002, 618.2870000000005, 467.5515000000003, 259.0560000000002, 0, 0, 0, 0, 542.9685000000004, 876.7050000000005, 1417.1055000000006, 1826.4930000000008, 2214.1425000000013, 2292.6255000000015, 1925.611500000001, 1578.474000000001]
# BU:
# [[ -329  -265  -259  -222  -210  -177  -133   -14    50   -24  -213  -244
#    -274  -231  -154  -134    43  -148  -401  -701 -1043 -1062  -878  -688]
#  [  -70   -63   -63   -57   -57   -35     0    -6   -78  -100  -106  -107
#    -157  -112   -99   -67     0    59   -42   -85   -59   -80   -68   -71]
#  [  -38   -28   -26   -26   -25    -7     3    25    11    23    27   -46
#    -109  -121  -111   -69    -7    72    -1   -56   -54   -44   -42   -35]]
# X:
# [[773. 623. 609. 524. 495. 445. 360. 126.  43. 145. 345. 390. 505. 427.
#   305. 253.  30. 248. 491. 788. 729. 742. 613. 480.]
#  [198. 179. 179. 161. 161. 130.  51.  49. 171. 234. 269. 289. 367. 286.
#   240. 174.  70.  30.  88.  99. 167. 227. 193. 201.]
#  [109.  82.  75.  76.  73.  51.  39.  30.  65.  88. 110. 216. 309. 297.
#   254. 177.  78.  30.  51.  71. 153. 127. 120. 101.]]
# pms:
# [0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.9320000000000006, 0.9320000000000006, 0.9320000000000006, 0.9320000000000006, 0.3, 0.3, 0.3, 0.3, 0.6360000000000003, 0.6360000000000003, 0.6360000000000003, 0.6360000000000003, 0.9320000000000006, 0.9320000000000006, 0.9320000000000006, 0.9320000000000006]
# [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 1.272000000000001, 1.272000000000001, 1.272000000000001, 0.3, 0.3, 0.3, 0.3, 0.7520000000000004, 0.7520000000000004, 0.7520000000000004, 0.7520000000000004, 0.3, 0.3, 0.3, 0.3]
# [0.3, 0.3, 0.3, 0.3, 0.3, 0.302, 0.3, 0.3, 0.3, 1.286000000000001, 1.286000000000001, 0.3, 0.3, 0.3, 0.3, 0.3, 0.7680000000000005, 0.7680000000000005, 0.7680000000000005, 0.7680000000000005, 0.3, 0.3, 0.3, 0.3]
# pmb:
# [0.3, 0.3, 0.34400000000000003, 0.3, 0.34400000000000003, 0.34400000000000003, 0.34400000000000003, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.6360000000000003, 0.6360000000000003, 0.6360000000000003, 0.9320000000000006, 0.9320000000000006, 0.9320000000000006, 0.9320000000000006]
# [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.7520000000000004, 0.7520000000000004, 0.7520000000000004, 0.3, 0.3, 0.3, 0.3]
# [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.7680000000000005, 0.7680000000000005, 0.7680000000000005, 0.3, 0.3, 0.3, 0.3]
# **************************************

































